React

npx create-react-app mtic-app -> crear proyecto react (Hace las veces de npm -g global sin necesidad de hacer la instalación como tal en la maquina)
cd mtic-app -> ingresar al proyecto
npm strat -> iniciar y ejecutar el proyecto (node package manager es un gestor de librerias)
npm uninstall -g create-react-app mitic-app -> eliminar el proyecto


el formato es jsx-> 

//promesas son acciones que se ejecutan en un futuro



//Fetch API, recuperar recursos de internet, basado de promesas, uso para clientes y servidor

//Await , espere que se cumpla la promesa para trabajar.



C:\Program Files\MongoDB\Server\5.0\bin


mongo=> inicia mongo
show dbs => muestra las bd existentes
use prueba1 =>Crear Base de datos consola y ubicarse
db.libros.insertOne({id:1,nombre:'Aprende Java',autor:'Joyanes',editoriales:['planeta','Siglo XXI'],precio:20,cantidad:50})=> Insertar un documento/registro
tabla bdr= colecciones bdnr
db.libros.find()=>Validar si el registro ya esta
db.libros.insertMany([{codigo:2,nombre:'Backo to the future 2',autor:'Spilberg',editoriales:['planeta']},{codigo:3,nombre:'Backo to future 3',autor:'Spilberg',editoriales:['planeta','Siglo XXI']}])=>Hacer la inserción multiple
show collections=>Saber las colecciones
db.libros.drop()=>borrar colecciond de libros
db.dropDatabase()=>Borrar la base de datos


use blog=>Crear una base de datos llamada "blog".

db.libros.insertMany([{codigo:1,titulo:'Backo to the future 2',autor:'Spilberg',editoriales:['planeta']},{codigo:2,titulo:'Backo to future 3',autor:'Spilberg',editoriales:['planeta','Siglo XXI']}])=>Agregar una colección llamada "posts" e insertar 5 documentos con una estructura a su elección.

show dbs=>Mostrar todas las bases de datos actuales.

show collections=>Eliminar la colección "posts".

db.dropDatabase()=>Eliminar la base de datos "blog" y mostrar las bases de datos existentes.





use base1
db.productos.insertOne({_id:1, nombre:'Manzanas',precio:5000})
db.productos.insertMany([{_id:1, nombre:'Manzanas',precio:5000},{_id:2, nombre:'peras',precio:4500},{_id:3, nombre:'Mangos',precio:6500}])


db.libros.insertOne({id:4,nombre:'Aprende BD',autor:'Martinez',editoriales:['planeta','Siglo XXI'],precio:60,cantidad:22})

-- Consultas
db.libros.find({id:3})
db.libros.find({precio:50, cantidad:12})
db.libros.find({precio:{$eq:50}}) =>muestra precio sea igual a 50
db.libros.find({precio:{$lt:50}})=> muestra precio sea menor a 50
db.libros.find({precio:{$lte:50}})=> muestra precio sea menor igual a 50
db.libros.find({precio:{$gt:50}})=> muestra precio sea mayor a 50
db.libros.find({precio:{$gte:50}})=> muestra precio sea mayor igual a 50
db.libros.find({precio:{$ne:50}})=> muestra no igual a 50
db.libros.find({precio:{$gte:20,$lte:45}})=> entre 20 y 45
db.libros.find({editoriales:{$in:["planeta"]}})=> todolos los libres de la editorial planeta
db.libros.find({editoriales:{$nin:["planeta"]}})=> todolos los libres que no pertenezcan editorial planeta


db.articulos.insertOne({_id: 1,nombre: 'MULTIFUNCION HP DESKJET 2675',rubro: 'impresora',precio: 3000,stock: 20 })
db.articulos.insertOne({_id: 2,nombre: 'MULTIFUNCION EPSON EXPRESSION XP241',rubro: 'impresora',precio: 3700,stock: 5 })
db.articulos.insertOne({_id: 3,nombre: 'LED 19 PHILIPS',rubro: 'monitor',precio: 4500,stock: 2})
db.articulos.insertOne({_id: 4, nombre: 'LED 22 PHILIPS',rubro: 'monitor',precio: 5700,stock: 4})
db.articulos.insertOne({_id: 5,  nombre: 'LED 27 PHILIPS',rubro: 'monitor',precio: 12000,stock: 1})
db.articulos.insertOne({_id: 6, nombre: 'LOGITECH M90',rubro: 'mouse',precio: 300,stock: 4})

db.articulos.find({rubro:{$ne:'impresora'}})
db.articulos.find({rubro:{$eq:'mouse'}})
db.articulos.find({precio:{$gte:5000}})
db.articulos.find({precio:{$gte:3500}, rubro:{$eq:'impresora'}})
db.articulos.find({stock:{$gte:0,$lte:4}})


--Actualizar documentos
db.libros.updateOne({id:{$eq:1}}, {$set:{precio:15,cantidad:1}}) =>actualizar el id 1, el precio y la cantidad
db.libros.updateOne({id:{$eq:4}}, {$set:{descripcion:'Se trata de desarrollo Soft'}})
db.libros.updateOne({id:{$eq:4}},{$unset:{descripcion:'Se trata de desarrollo Soft'}})=> Eliminar un campo del documento


db.libros.updateOne({id:{$eq:1}},{$push:{editoriales:'Mc-Graw Hill'}}) =>Agregar un nuevo elemento dentro de la lista

db.libros.updateOne({id:{$eq:1}},{$pull:{editoriales:'planeta'}}) =>Eliminar un  elemento dentro de la lista


=>Modificar precio mouse nombre 'LOGITECH M90'
db.articulos.updateOne({nombre:{$eq:'LOGITECH M90'}}, {$set:{precio:450}})


=>Fijar el stock en 0 articulo cuyo _id=6
db.articulos.updateOne({_id:{$eq:6}},{$set:{stock:0}})


=>Agregar  el campo proveedores con el array ['Martinez,'Gutierrez'] para articulo _id es 6.

db.articulos.updateOne({_id:{$eq:6}},{$set:{proveedores:['Martinez','Gutierrez']}})

=>Eliminar el campo de proveedores para el articulo cuyo _id es 6.

db.articulos.updateOne({_id:{$eq:6}},{$unset:{proveedores:['Martinez','Gutierrez']}})


=>actualizar nombre
db.clientes.updateOne({_id: {$eq:1}},{$set:{ciudad:"Bucaramanga"}})


=>Obtener los que sean mayor a 5000 o nombre=Mangos (Operador Or)

db.productos.find({$or:[{precio:{$gte:5000}},{nombre:'Mangos'}]})


=>Obtener aquellos que no tenan un precio mayor a 6000

db.productos.find({precio:{$not:{$gte:6000}}})

=>Obtener los que sean mayor a 5000 y nombre=Mangos (Operador and)

db.productos.find({$and:[{precio:{$gte:5000}},{nombre:'Mangos'}]})

=>Insertar nueva coleccion de documentos


db.medicamentos.insertMany([{_id: 1,nombre: 'Sertal',laboratorio: 'Roche',precio: 5.2,cantidad: 100},{_id: 2,nombre: 'Buscapina',laboratorio: 'Roche',precio: 4.1,cantidad: 200},{_id: 3,nombre: 'Amoxidal 500',laboratorio: 'Bayer',precio: 15.60,cantidad: 100},{_id: 4,nombre: 'Paracetamol 500',laboratorio: 'Bago',precio: 1.9,cantidad: 200},{_id: 5,nombre: 'Bayaspirina',laboratorio: 'Bayer',precio: 2.1,cantidad: 150},{_id: 6,nombre: 'Amoxidal jarabe',laboratorio: 'Bayer',precio: 5.1,cantidad: 50}])

=>Obtener los medicamientos cuyo laboratorio sea Roche y precio menor a 5
db.medicamentos.find({$and:[{precio:{$lte:5}},{laboratorio:'Roche'}]})

=>Obtener los medicamientos cuyo laboratorio sea Roche 0 precio menor a 5
db.medicamentos.find({$or:[{precio:{$lte:5}},{laboratorio:'Roche'}]})

=> muestre medicamentos cuyo laboratorio no sea bayer
db.medicamentos.find({laboratorio:{$not:{$eq:'Bayer'}}})

=> muestre medicamentos cuyo laboratorio sea bayer y cuya cantidad n sea 100
db.medicamentos.find({$and:[{cantidad:{$not:{$eq:100}}},{laboratorio:'Bayer'}]})

=>Elimine todos los documentos de la colleción medicamentos laboratorio=Bayer y precio mayor a 10

db.medicamentos.deleteMany({laboratorio:'Bayer',precio:{$gt:10}})

=>Cambie la cantidad por 200, a todos los medicamentos Roche cuyo precio sea mayor a 5

db.medicamentos.updateMany({laboratorio:'Roche',precio:{$gt:5}}, {$set:{cantidad:200}})

=> Borrar medicamentos cuyo laboratorio sea Bayer o precio menor a 3

db.medicamentos.deleteMany({$or: [{laboratorio:'Bayer',precio:{$lt:3}}]})

=>Insertar nueva colección

db.peliculas.insertMany([
{_id: 1
,title:'Fight Club'
,writer: 'Chuck Palahniuk'
,year:1999
,actors: ['Brad Pitt','Edward Norton']}

,{_id: 2
,title:'Pulp Fiction'
,writer: 'Quentin Tarantino'
,year:1999
,actors: ['John Travolta','Uma Thurman']}])

db.peliculas.insertMany([{_id: 3
,title:'Inglorious Basterds'
,writer: 'Quentin Tarantino'
,year:2009
,actors: ['Brad Pitt','Diane Kruger','Eli Roth']}

,{_id: 4
,title:'The Hobbit: An Unexpected Journey'
,writer: 'J.R.R. Tolkein'
,year:2012
,franchise:'The Hobbit'}])

db.peliculas.insertMany([{_id: 5
,title:'The Hobbit: The Desolation of Smaug'
,writer: 'J.R.R. Tolkein'
,year:2013
,franchise:'The Hobbit'}

,{_id: 6
,title:'The Hobbit: The Battle of the Five Armies'
,writer: 'J.R.R. Tolkein'
,year:2012,franchise:'The Hobbit'
,synopsis:'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness'}])

db.peliculas.insertMany([{_id: 7
,title:'Pee Wee Hermans Big Adventure'}

,{_id: 8
,title:'Avatar'}])



Obtener todos los documentos
Obtener documentos con writer igual a "Quentin Tarantino"
Obtener documentos con actors que incluyan a "Brad Pitt"
Obtener documentos con franchise igual a "The Hobbit"
Obtener todas las películas de los 90s.
Obtener las películas estrenadas entre el año 2000 y 2010.
Agregar sinopsis a "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
Agregar sinopsis a "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the 
Encontrar las películas que en la sinopsis contengan la palabra "Bilbo"
Encontrar las películas que en la sinopsis contengan la palabra "Gandalf"
Encontrar las películas que en la sinopsis contengan la palabra "Bilbo" y no la palabra "Gandalf"
Encontrar las películas que en la sinopsis contengan la palabra "dwarves" ó "hobbit"
Encontrar las películas que en la sinopsis contengan la palabra "gold" y "dragon"
Eliminar la película "Pee Wee Herman's Big Adventure"
Eliminar la película "Avatar"

Escritor= Quentin Tarantino
db.peliculas.find({writer:"Quentin Tarantino"})

db.peliculas.find({actors:"Brad Pitt"})

db.peliculas.find({franchise:"The Hobbit"})

db.pelicualas.find({$and:[{year:{$gt:1990}},{year:{$lt:2000}}]})

db.peliculas.updateOne({title:"The Hobbit: The Desolation of Smaug"}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

Push=> agregar

db.peliculas.update({title:"Pulp Fiction"},{$push:{actors:"Samuel L. Jackson"}})

Encontrar Peliculas que en la synopsis tenga palabra Bilbo

db.peliculas.find({synopsis:/Bilbo/})


db.peliculas.find({synopsis:/Gandalf/})

Encuentre Bilbo per no Gandalf
db.peliculas.find({$and:[{synopsis:/Bilbo/},{synopsis:{$not:/Gandalf/}}]})

Eliminar Peliculas

db.peliculas.deleteOne({title:"Pee Wee Hermans Big Adventure"})

